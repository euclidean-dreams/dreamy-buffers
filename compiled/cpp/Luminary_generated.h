// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LUMINARY_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LUMINARY_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Luminary;
struct LuminaryBuilder;

struct Luminary FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LuminaryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_SAMPLES = 6
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::Vector<int8_t> *samples() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_SAMPLES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_SAMPLES) &&
           verifier.VerifyVector(samples()) &&
           verifier.EndTable();
  }
};

struct LuminaryBuilder {
  typedef Luminary Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(Luminary::VT_TIMESTAMP, timestamp, 0);
  }
  void add_samples(flatbuffers::Offset<flatbuffers::Vector<int8_t>> samples) {
    fbb_.AddOffset(Luminary::VT_SAMPLES, samples);
  }
  explicit LuminaryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Luminary> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Luminary>(end);
    return o;
  }
};

inline flatbuffers::Offset<Luminary> CreateLuminary(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> samples = 0) {
  LuminaryBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_samples(samples);
  return builder_.Finish();
}

inline flatbuffers::Offset<Luminary> CreateLuminaryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    const std::vector<int8_t> *samples = nullptr) {
  auto samples__ = samples ? _fbb.CreateVector<int8_t>(*samples) : 0;
  return ImpresarioSerialization::CreateLuminary(
      _fbb,
      timestamp,
      samples__);
}

inline const ImpresarioSerialization::Luminary *GetLuminary(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Luminary>(buf);
}

inline const ImpresarioSerialization::Luminary *GetSizePrefixedLuminary(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Luminary>(buf);
}

inline bool VerifyLuminaryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Luminary>(nullptr);
}

inline bool VerifySizePrefixedLuminaryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Luminary>(nullptr);
}

inline void FinishLuminaryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Luminary> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLuminaryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Luminary> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_LUMINARY_IMPRESARIOSERIALIZATION_H_
