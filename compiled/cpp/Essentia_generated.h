// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ESSENTIA_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_ESSENTIA_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Essentia;
struct EssentiaBuilder;

struct Essentia FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EssentiaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MELSIGNAL = 4,
    VT_RADIXES = 6
  };
  const flatbuffers::Vector<float> *melSignal() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MELSIGNAL);
  }
  const flatbuffers::Vector<float> *radixes() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_RADIXES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MELSIGNAL) &&
           verifier.VerifyVector(melSignal()) &&
           VerifyOffset(verifier, VT_RADIXES) &&
           verifier.VerifyVector(radixes()) &&
           verifier.EndTable();
  }
};

struct EssentiaBuilder {
  typedef Essentia Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_melSignal(flatbuffers::Offset<flatbuffers::Vector<float>> melSignal) {
    fbb_.AddOffset(Essentia::VT_MELSIGNAL, melSignal);
  }
  void add_radixes(flatbuffers::Offset<flatbuffers::Vector<float>> radixes) {
    fbb_.AddOffset(Essentia::VT_RADIXES, radixes);
  }
  explicit EssentiaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Essentia> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Essentia>(end);
    return o;
  }
};

inline flatbuffers::Offset<Essentia> CreateEssentia(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> melSignal = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> radixes = 0) {
  EssentiaBuilder builder_(_fbb);
  builder_.add_radixes(radixes);
  builder_.add_melSignal(melSignal);
  return builder_.Finish();
}

inline flatbuffers::Offset<Essentia> CreateEssentiaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *melSignal = nullptr,
    const std::vector<float> *radixes = nullptr) {
  auto melSignal__ = melSignal ? _fbb.CreateVector<float>(*melSignal) : 0;
  auto radixes__ = radixes ? _fbb.CreateVector<float>(*radixes) : 0;
  return ImpresarioSerialization::CreateEssentia(
      _fbb,
      melSignal__,
      radixes__);
}

inline const ImpresarioSerialization::Essentia *GetEssentia(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Essentia>(buf);
}

inline const ImpresarioSerialization::Essentia *GetSizePrefixedEssentia(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Essentia>(buf);
}

inline bool VerifyEssentiaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Essentia>(nullptr);
}

inline bool VerifySizePrefixedEssentiaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Essentia>(nullptr);
}

inline void FinishEssentiaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Essentia> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEssentiaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Essentia> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_ESSENTIA_IMPRESARIOSERIALIZATION_H_
