// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PEAKS_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_PEAKS_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Peaks;
struct PeaksBuilder;

struct Peaks FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PeaksBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGINTIMESTAMP = 4,
    VT_PEAKS = 6
  };
  uint64_t originTimestamp() const {
    return GetField<uint64_t>(VT_ORIGINTIMESTAMP, 0);
  }
  const flatbuffers::Vector<float> *peaks() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_PEAKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ORIGINTIMESTAMP) &&
           VerifyOffset(verifier, VT_PEAKS) &&
           verifier.VerifyVector(peaks()) &&
           verifier.EndTable();
  }
};

struct PeaksBuilder {
  typedef Peaks Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_originTimestamp(uint64_t originTimestamp) {
    fbb_.AddElement<uint64_t>(Peaks::VT_ORIGINTIMESTAMP, originTimestamp, 0);
  }
  void add_peaks(flatbuffers::Offset<flatbuffers::Vector<float>> peaks) {
    fbb_.AddOffset(Peaks::VT_PEAKS, peaks);
  }
  explicit PeaksBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PeaksBuilder &operator=(const PeaksBuilder &);
  flatbuffers::Offset<Peaks> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Peaks>(end);
    return o;
  }
};

inline flatbuffers::Offset<Peaks> CreatePeaks(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t originTimestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> peaks = 0) {
  PeaksBuilder builder_(_fbb);
  builder_.add_originTimestamp(originTimestamp);
  builder_.add_peaks(peaks);
  return builder_.Finish();
}

inline flatbuffers::Offset<Peaks> CreatePeaksDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t originTimestamp = 0,
    const std::vector<float> *peaks = nullptr) {
  auto peaks__ = peaks ? _fbb.CreateVector<float>(*peaks) : 0;
  return ImpresarioSerialization::CreatePeaks(
      _fbb,
      originTimestamp,
      peaks__);
}

inline const ImpresarioSerialization::Peaks *GetPeaks(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Peaks>(buf);
}

inline const ImpresarioSerialization::Peaks *GetSizePrefixedPeaks(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Peaks>(buf);
}

inline bool VerifyPeaksBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Peaks>(nullptr);
}

inline bool VerifySizePrefixedPeaksBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Peaks>(nullptr);
}

inline void FinishPeaksBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Peaks> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPeaksBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Peaks> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_PEAKS_IMPRESARIOSERIALIZATION_H_
