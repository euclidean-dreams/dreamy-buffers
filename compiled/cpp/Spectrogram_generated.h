// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SPECTROGRAM_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_SPECTROGRAM_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Spectrogram;
struct SpectrogramBuilder;

struct Spectrogram FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpectrogramBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGINTIMESTAMP = 4,
    VT_MAGNITUDES = 6,
    VT_SPECTRALFLUXES = 8,
    VT_PEAKS = 10
  };
  uint64_t originTimestamp() const {
    return GetField<uint64_t>(VT_ORIGINTIMESTAMP, 0);
  }
  const flatbuffers::Vector<float> *magnitudes() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_MAGNITUDES);
  }
  const flatbuffers::Vector<float> *spectralFluxes() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SPECTRALFLUXES);
  }
  const flatbuffers::Vector<float> *peaks() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_PEAKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ORIGINTIMESTAMP) &&
           VerifyOffset(verifier, VT_MAGNITUDES) &&
           verifier.VerifyVector(magnitudes()) &&
           VerifyOffset(verifier, VT_SPECTRALFLUXES) &&
           verifier.VerifyVector(spectralFluxes()) &&
           VerifyOffset(verifier, VT_PEAKS) &&
           verifier.VerifyVector(peaks()) &&
           verifier.EndTable();
  }
};

struct SpectrogramBuilder {
  typedef Spectrogram Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_originTimestamp(uint64_t originTimestamp) {
    fbb_.AddElement<uint64_t>(Spectrogram::VT_ORIGINTIMESTAMP, originTimestamp, 0);
  }
  void add_magnitudes(flatbuffers::Offset<flatbuffers::Vector<float>> magnitudes) {
    fbb_.AddOffset(Spectrogram::VT_MAGNITUDES, magnitudes);
  }
  void add_spectralFluxes(flatbuffers::Offset<flatbuffers::Vector<float>> spectralFluxes) {
    fbb_.AddOffset(Spectrogram::VT_SPECTRALFLUXES, spectralFluxes);
  }
  void add_peaks(flatbuffers::Offset<flatbuffers::Vector<float>> peaks) {
    fbb_.AddOffset(Spectrogram::VT_PEAKS, peaks);
  }
  explicit SpectrogramBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SpectrogramBuilder &operator=(const SpectrogramBuilder &);
  flatbuffers::Offset<Spectrogram> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Spectrogram>(end);
    return o;
  }
};

inline flatbuffers::Offset<Spectrogram> CreateSpectrogram(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t originTimestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> magnitudes = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> spectralFluxes = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> peaks = 0) {
  SpectrogramBuilder builder_(_fbb);
  builder_.add_originTimestamp(originTimestamp);
  builder_.add_peaks(peaks);
  builder_.add_spectralFluxes(spectralFluxes);
  builder_.add_magnitudes(magnitudes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Spectrogram> CreateSpectrogramDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t originTimestamp = 0,
    const std::vector<float> *magnitudes = nullptr,
    const std::vector<float> *spectralFluxes = nullptr,
    const std::vector<float> *peaks = nullptr) {
  auto magnitudes__ = magnitudes ? _fbb.CreateVector<float>(*magnitudes) : 0;
  auto spectralFluxes__ = spectralFluxes ? _fbb.CreateVector<float>(*spectralFluxes) : 0;
  auto peaks__ = peaks ? _fbb.CreateVector<float>(*peaks) : 0;
  return ImpresarioSerialization::CreateSpectrogram(
      _fbb,
      originTimestamp,
      magnitudes__,
      spectralFluxes__,
      peaks__);
}

inline const ImpresarioSerialization::Spectrogram *GetSpectrogram(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Spectrogram>(buf);
}

inline const ImpresarioSerialization::Spectrogram *GetSizePrefixedSpectrogram(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Spectrogram>(buf);
}

inline bool VerifySpectrogramBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Spectrogram>(nullptr);
}

inline bool VerifySizePrefixedSpectrogramBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Spectrogram>(nullptr);
}

inline void FinishSpectrogramBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Spectrogram> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSpectrogramBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Spectrogram> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_SPECTROGRAM_IMPRESARIOSERIALIZATION_H_
