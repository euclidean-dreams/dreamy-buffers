// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEDPAYLOAD_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LEDPAYLOAD_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "RGBColor_generated.h"

namespace ImpresarioSerialization {

struct LedPayload;
struct LedPayloadBuilder;

struct LedPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LedPayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEDS = 4
  };
  const flatbuffers::Vector<const ImpresarioSerialization::RGBColor *> *leds() const {
    return GetPointer<const flatbuffers::Vector<const ImpresarioSerialization::RGBColor *> *>(VT_LEDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LEDS) &&
           verifier.VerifyVector(leds()) &&
           verifier.EndTable();
  }
};

struct LedPayloadBuilder {
  typedef LedPayload Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_leds(flatbuffers::Offset<flatbuffers::Vector<const ImpresarioSerialization::RGBColor *>> leds) {
    fbb_.AddOffset(LedPayload::VT_LEDS, leds);
  }
  explicit LedPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LedPayloadBuilder &operator=(const LedPayloadBuilder &);
  flatbuffers::Offset<LedPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LedPayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<LedPayload> CreateLedPayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const ImpresarioSerialization::RGBColor *>> leds = 0) {
  LedPayloadBuilder builder_(_fbb);
  builder_.add_leds(leds);
  return builder_.Finish();
}

inline flatbuffers::Offset<LedPayload> CreateLedPayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<ImpresarioSerialization::RGBColor> *leds = nullptr) {
  auto leds__ = leds ? _fbb.CreateVectorOfStructs<ImpresarioSerialization::RGBColor>(*leds) : 0;
  return ImpresarioSerialization::CreateLedPayload(
      _fbb,
      leds__);
}

inline const ImpresarioSerialization::LedPayload *GetLedPayload(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::LedPayload>(buf);
}

inline const ImpresarioSerialization::LedPayload *GetSizePrefixedLedPayload(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::LedPayload>(buf);
}

inline bool VerifyLedPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::LedPayload>(nullptr);
}

inline bool VerifySizePrefixedLedPayloadBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::LedPayload>(nullptr);
}

inline void FinishLedPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::LedPayload> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLedPayloadBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::LedPayload> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_LEDPAYLOAD_IMPRESARIOSERIALIZATION_H_
