// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOATTRIBUTES_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_AUDIOATTRIBUTES_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "OnsetAggregate_generated.h"
#include "OnsetMethod_generated.h"

namespace ImpresarioSerialization {

struct AudioAttributes;
struct AudioAttributesBuilder;

struct AudioAttributes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioAttributesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ONSETAGGREGATE = 4
  };
  const ImpresarioSerialization::OnsetAggregate *onsetAggregate() const {
    return GetPointer<const ImpresarioSerialization::OnsetAggregate *>(VT_ONSETAGGREGATE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ONSETAGGREGATE) &&
           verifier.VerifyTable(onsetAggregate()) &&
           verifier.EndTable();
  }
};

struct AudioAttributesBuilder {
  typedef AudioAttributes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_onsetAggregate(flatbuffers::Offset<ImpresarioSerialization::OnsetAggregate> onsetAggregate) {
    fbb_.AddOffset(AudioAttributes::VT_ONSETAGGREGATE, onsetAggregate);
  }
  explicit AudioAttributesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioAttributesBuilder &operator=(const AudioAttributesBuilder &);
  flatbuffers::Offset<AudioAttributes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioAttributes>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioAttributes> CreateAudioAttributes(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ImpresarioSerialization::OnsetAggregate> onsetAggregate = 0) {
  AudioAttributesBuilder builder_(_fbb);
  builder_.add_onsetAggregate(onsetAggregate);
  return builder_.Finish();
}

inline const ImpresarioSerialization::AudioAttributes *GetAudioAttributes(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::AudioAttributes>(buf);
}

inline const ImpresarioSerialization::AudioAttributes *GetSizePrefixedAudioAttributes(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::AudioAttributes>(buf);
}

inline bool VerifyAudioAttributesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::AudioAttributes>(nullptr);
}

inline bool VerifySizePrefixedAudioAttributesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::AudioAttributes>(nullptr);
}

inline void FinishAudioAttributesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::AudioAttributes> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAudioAttributesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::AudioAttributes> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_AUDIOATTRIBUTES_IMPRESARIOSERIALIZATION_H_
