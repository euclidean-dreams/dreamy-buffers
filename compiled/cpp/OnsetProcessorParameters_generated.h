// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ONSETPROCESSORPARAMETERS_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_ONSETPROCESSORPARAMETERS_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "OnsetMethod_generated.h"

namespace ImpresarioSerialization {

struct OnsetProcessorParameters;
struct OnsetProcessorParametersBuilder;

struct OnsetProcessorParameters FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OnsetProcessorParametersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METHOD = 4,
    VT_THRESHOLD = 6,
    VT_MINIOI_MS = 8,
    VT_SILENCE = 10,
    VT_ADAPTIVE_WHITENING = 12
  };
  ImpresarioSerialization::OnsetMethod method() const {
    return static_cast<ImpresarioSerialization::OnsetMethod>(GetField<int8_t>(VT_METHOD, 0));
  }
  float threshold() const {
    return GetField<float>(VT_THRESHOLD, 0.0f);
  }
  int32_t minioi_ms() const {
    return GetField<int32_t>(VT_MINIOI_MS, 0);
  }
  float silence() const {
    return GetField<float>(VT_SILENCE, 0.0f);
  }
  int8_t adaptive_whitening() const {
    return GetField<int8_t>(VT_ADAPTIVE_WHITENING, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_METHOD) &&
           VerifyField<float>(verifier, VT_THRESHOLD) &&
           VerifyField<int32_t>(verifier, VT_MINIOI_MS) &&
           VerifyField<float>(verifier, VT_SILENCE) &&
           VerifyField<int8_t>(verifier, VT_ADAPTIVE_WHITENING) &&
           verifier.EndTable();
  }
};

struct OnsetProcessorParametersBuilder {
  typedef OnsetProcessorParameters Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_method(ImpresarioSerialization::OnsetMethod method) {
    fbb_.AddElement<int8_t>(OnsetProcessorParameters::VT_METHOD, static_cast<int8_t>(method), 0);
  }
  void add_threshold(float threshold) {
    fbb_.AddElement<float>(OnsetProcessorParameters::VT_THRESHOLD, threshold, 0.0f);
  }
  void add_minioi_ms(int32_t minioi_ms) {
    fbb_.AddElement<int32_t>(OnsetProcessorParameters::VT_MINIOI_MS, minioi_ms, 0);
  }
  void add_silence(float silence) {
    fbb_.AddElement<float>(OnsetProcessorParameters::VT_SILENCE, silence, 0.0f);
  }
  void add_adaptive_whitening(int8_t adaptive_whitening) {
    fbb_.AddElement<int8_t>(OnsetProcessorParameters::VT_ADAPTIVE_WHITENING, adaptive_whitening, 0);
  }
  explicit OnsetProcessorParametersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OnsetProcessorParametersBuilder &operator=(const OnsetProcessorParametersBuilder &);
  flatbuffers::Offset<OnsetProcessorParameters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OnsetProcessorParameters>(end);
    return o;
  }
};

inline flatbuffers::Offset<OnsetProcessorParameters> CreateOnsetProcessorParameters(
    flatbuffers::FlatBufferBuilder &_fbb,
    ImpresarioSerialization::OnsetMethod method = ImpresarioSerialization::OnsetMethod::specflux,
    float threshold = 0.0f,
    int32_t minioi_ms = 0,
    float silence = 0.0f,
    int8_t adaptive_whitening = 0) {
  OnsetProcessorParametersBuilder builder_(_fbb);
  builder_.add_silence(silence);
  builder_.add_minioi_ms(minioi_ms);
  builder_.add_threshold(threshold);
  builder_.add_adaptive_whitening(adaptive_whitening);
  builder_.add_method(method);
  return builder_.Finish();
}

inline const ImpresarioSerialization::OnsetProcessorParameters *GetOnsetProcessorParameters(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::OnsetProcessorParameters>(buf);
}

inline const ImpresarioSerialization::OnsetProcessorParameters *GetSizePrefixedOnsetProcessorParameters(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::OnsetProcessorParameters>(buf);
}

inline bool VerifyOnsetProcessorParametersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::OnsetProcessorParameters>(nullptr);
}

inline bool VerifySizePrefixedOnsetProcessorParametersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::OnsetProcessorParameters>(nullptr);
}

inline void FinishOnsetProcessorParametersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::OnsetProcessorParameters> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOnsetProcessorParametersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::OnsetProcessorParameters> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_ONSETPROCESSORPARAMETERS_IMPRESARIOSERIALIZATION_H_
