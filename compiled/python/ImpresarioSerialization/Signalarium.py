# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ImpresarioSerialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Signalarium(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Signalarium()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSignalarium(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Signalarium
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Signalarium
    def Stft(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Signalarium
    def StftAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Signalarium
    def StftLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Signalarium
    def StftIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Signalarium
    def Radixes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Signalarium
    def RadixesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Signalarium
    def RadixesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Signalarium
    def RadixesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def SignalariumStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddStft(builder, stft): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stft), 0)
def SignalariumAddStft(builder, stft):
    """This method is deprecated. Please switch to AddStft."""
    return AddStft(builder, stft)
def StartStftVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SignalariumStartStftVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStftVector(builder, numElems)
def AddRadixes(builder, radixes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(radixes), 0)
def SignalariumAddRadixes(builder, radixes):
    """This method is deprecated. Please switch to AddRadixes."""
    return AddRadixes(builder, radixes)
def StartRadixesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SignalariumStartRadixesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRadixesVector(builder, numElems)
def End(builder): return builder.EndObject()
def SignalariumEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)