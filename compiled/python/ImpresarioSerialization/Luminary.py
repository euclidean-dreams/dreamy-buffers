# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ImpresarioSerialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Luminary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Luminary()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLuminary(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Luminary
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Luminary
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Luminary
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Luminary
    def SamplesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Luminary
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Luminary
    def SamplesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def LuminaryStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTimestamp(builder, timestamp): builder.PrependUint64Slot(0, timestamp, 0)
def LuminaryAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddSamples(builder, samples): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)
def LuminaryAddSamples(builder, samples):
    """This method is deprecated. Please switch to AddSamples."""
    return AddSamples(builder, samples)
def StartSamplesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def LuminaryStartSamplesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSamplesVector(builder, numElems)
def End(builder): return builder.EndObject()
def LuminaryEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)