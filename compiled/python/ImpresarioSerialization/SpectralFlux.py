# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ImpresarioSerialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpectralFlux(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSpectralFlux(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpectralFlux()
        x.Init(buf, n + offset)
        return x

    # SpectralFlux
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpectralFlux
    def OriginTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SpectralFlux
    def SpectralFluxes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SpectralFlux
    def SpectralFluxesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SpectralFlux
    def SpectralFluxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpectralFlux
    def SpectralFluxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SpectralFluxStart(builder): builder.StartObject(2)
def SpectralFluxAddOriginTimestamp(builder, originTimestamp): builder.PrependUint64Slot(0, originTimestamp, 0)
def SpectralFluxAddSpectralFluxes(builder, spectralFluxes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(spectralFluxes), 0)
def SpectralFluxStartSpectralFluxesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SpectralFluxEnd(builder): return builder.EndObject()
